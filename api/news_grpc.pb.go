// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NewsClient is the client API for News service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsClient interface {
	// Get artist by arid
	GetArtcle(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Article, error)
	// Get release information by arid
	GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*CollectionResponse, error)
	// Get recording information by arid
	GetImage(ctx context.Context, opts ...grpc.CallOption) (News_GetImageClient, error)
}

type newsClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsClient(cc grpc.ClientConnInterface) NewsClient {
	return &newsClient{cc}
}

func (c *newsClient) GetArtcle(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/api.News/GetArtcle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*CollectionResponse, error) {
	out := new(CollectionResponse)
	err := c.cc.Invoke(ctx, "/api.News/GetCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetImage(ctx context.Context, opts ...grpc.CallOption) (News_GetImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &News_ServiceDesc.Streams[0], "/api.News/GetImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &newsGetImageClient{stream}
	return x, nil
}

type News_GetImageClient interface {
	Send(*wrapperspb.StringValue) error
	Recv() (*Image, error)
	grpc.ClientStream
}

type newsGetImageClient struct {
	grpc.ClientStream
}

func (x *newsGetImageClient) Send(m *wrapperspb.StringValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *newsGetImageClient) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NewsServer is the server API for News service.
// All implementations must embed UnimplementedNewsServer
// for forward compatibility
type NewsServer interface {
	// Get artist by arid
	GetArtcle(context.Context, *wrapperspb.StringValue) (*Article, error)
	// Get release information by arid
	GetCollection(context.Context, *GetCollectionRequest) (*CollectionResponse, error)
	// Get recording information by arid
	GetImage(News_GetImageServer) error
	mustEmbedUnimplementedNewsServer()
}

// UnimplementedNewsServer must be embedded to have forward compatible implementations.
type UnimplementedNewsServer struct {
}

func (UnimplementedNewsServer) GetArtcle(context.Context, *wrapperspb.StringValue) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtcle not implemented")
}
func (UnimplementedNewsServer) GetCollection(context.Context, *GetCollectionRequest) (*CollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedNewsServer) GetImage(News_GetImageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedNewsServer) mustEmbedUnimplementedNewsServer() {}

// UnsafeNewsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsServer will
// result in compilation errors.
type UnsafeNewsServer interface {
	mustEmbedUnimplementedNewsServer()
}

func RegisterNewsServer(s grpc.ServiceRegistrar, srv NewsServer) {
	s.RegisterService(&News_ServiceDesc, srv)
}

func _News_GetArtcle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetArtcle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.News/GetArtcle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetArtcle(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.News/GetCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetCollection(ctx, req.(*GetCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NewsServer).GetImage(&newsGetImageServer{stream})
}

type News_GetImageServer interface {
	Send(*Image) error
	Recv() (*wrapperspb.StringValue, error)
	grpc.ServerStream
}

type newsGetImageServer struct {
	grpc.ServerStream
}

func (x *newsGetImageServer) Send(m *Image) error {
	return x.ServerStream.SendMsg(m)
}

func (x *newsGetImageServer) Recv() (*wrapperspb.StringValue, error) {
	m := new(wrapperspb.StringValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// News_ServiceDesc is the grpc.ServiceDesc for News service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var News_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.News",
	HandlerType: (*NewsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArtcle",
			Handler:    _News_GetArtcle_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _News_GetCollection_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetImage",
			Handler:       _News_GetImage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/news.proto",
}
